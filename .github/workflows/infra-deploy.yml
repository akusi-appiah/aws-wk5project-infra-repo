name: Deploy Infra & Image

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  deploy-core:
    runs-on: ubuntu-latest
    outputs:
      ecr_uri: ${{ steps.cf.outputs.ECRRepositoryUri }}
    steps:
      - uses: actions/checkout@v3

      - name: AWS Login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Deploy core infra
        id: cf
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: igallery-infra
          template: infrastructure.yml
          capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          parameter-overrides: DeployApp=false

  build-push-image:
    needs: deploy-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: AWS Login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if latest image exists
        id: check-image
        run: |
          REPO_NAME=igallery-repo
          IMAGE_TAG=latest
          IMAGE_EXISTS=$(aws ecr describe-images --repository-name $REPO_NAME --image-ids imageTag=$IMAGE_TAG --query 'imageDetails[0].imageDigest' --output text 2>/dev/null || echo "")
          if [ -n "$IMAGE_EXISTS" ]; then
            echo "Image with tag $IMAGE_TAG already exists."
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image with tag $IMAGE_TAG does not exist."
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push Placeholder
        if: steps.check-image.outputs.image_exists == 'false'
        run: |
          IMAGE_URI="${{ needs.deploy-core.outputs.ecr_uri }}:latest"
          cat > Dockerfile <<EOF
          FROM nginx:alpine
          RUN echo '<h1>Hello World</h1>' > /usr/share/nginx/html/index.html
          EOF
          docker build -t igallery-repo:latest .
          docker tag igallery-repo:latest "$IMAGE_URI"
          docker push "$IMAGE_URI"

  deploy-app:
    needs: [deploy-core, build-push-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: AWS Login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Deploy App Resources
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: igallery-infra
          template: infrastructure.yml
          capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          parameter-overrides: DeployApp=true,ContainerImage=${{ needs.deploy-core.outputs.ecr_uri }}:latest
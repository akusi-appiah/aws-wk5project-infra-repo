# This CloudFormation template sets up a full infrastructure stack for an application using AWS services.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::CodeDeployBlueGreen
Description: 'Full infra stack: VPC, endpoints, ALB, ECS + Fargate, Blue/Green deploy via CodePipeline.'

Parameters:
  VpcCidr: { Type: String, Default: 10.0.0.0/16 }
  PublicSubnetCIDRs: { Type: List<String>, Default: ['10.0.1.0/24','10.0.2.0/24'] }
  PrivateSubnetCIDRs: { Type: List<String>, Default: ['10.0.101.0/24','10.0.102.0/24'] }
  AvailabilityZones: { Type: List<String>, Default: ['eu-west-1a','eu-west-1b'] }
  ECRRepoName: { Type: String, Default: igallery-repo }
  ECSAppName: { Type: String, Default: igallery-app }
  ContainerPort: { Type: Number, Default: 3000 }
  DesiredCount: { Type: Number, Default: 2 }

Resources:
  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: gallery-vpc }]

  InternetGateway: { Type: AWS::EC2::InternetGateway }
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref VPC }
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [0, !Ref PublicSubnetCIDRs], AvailabilityZone: !Select [0, !Ref AvailabilityZones], MapPublicIpOnLaunch: true, Tags: [{ Key: Name, Value: public-subnet-a }] }
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [1, !Ref PublicSubnetCIDRs], AvailabilityZone: !Select [1, !Ref AvailabilityZones], MapPublicIpOnLaunch: true, Tags: [{ Key: Name, Value: public-subnet-b }] }
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [0, !Ref PrivateSubnetCIDRs], AvailabilityZone: !Select [0, !Ref AvailabilityZones], Tags: [{ Key: Name, Value: private-subnet-a }] }
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [1, !Ref PrivateSubnetCIDRs], AvailabilityZone: !Select [1, !Ref AvailabilityZones], Tags: [{ Key: Name, Value: private-subnet-b }] }

  PublicSubnet1RTA: { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnet1, RouteTableId: !Ref PublicRT } }
  PublicSubnet2RTA: { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnet2, RouteTableId: !Ref PublicRT } }

  # VPC Endpoints
  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Endpoint SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds: [ !Ref PublicRT ]
      VpcEndpointType: Gateway
      PolicyDocument:
        Statement: [{ Action: "s3:*", Effect: Allow, Principal: "*", Resource: "*" }]

  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

    # --- ECR Repository (Private by default) ---
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepoName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE


  # ALB & Security Groups
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  taskSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Tasks SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ECSAppName}-alb"
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: [ !Ref AlbSG ]

  BlueTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSAppName}-blue"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher: { HttpCode: "200" }

  GreenTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSAppName}-green"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher: { HttpCode: "200" }

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref BlueTg
                Weight: 100
              - TargetGroupArn: !Ref GreenTg
                Weight: 0

  # S3 Bucket for Image Storage
  AppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: wk5lab1imagesbucket025
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      DeletionPolicy: Delete

  # ECS Cluster & Task
  ECSCluster: { Type: AWS::ECS::Cluster }

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::wk5lab1imagesbucket025
                  - !Sub arn:aws:s3:::wk5lab1imagesbucket025/*

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ECSAppName
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ECSAppName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}:latest"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ECSAppName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: AlbListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      DeploymentController: { Type: CODE_DEPLOY }
      TaskDefinition: !Ref ECSTaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
          SecurityGroups: [ !Ref taskSG ]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Ref ECSAppName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref BlueTg
      Role: !GetAtt CodeDeployServiceRole.Arn


    # -- Application Auto Scaling Role --
  ApplicationAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppAutoscalingPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - application-autoscaling:*
                Resource: '*'

  # -- Scalable Target Resource --
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Sub "service/${ECSCluster}/${ECSService}"
      RoleARN: !GetAtt ApplicationAutoscalingRole.Arn
      MinCapacity: 1
      MaxCapacity: 10

  # -- Target Tracking Scaling Policy --
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-target-tracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60


  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codedeploy.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForECS

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: { ComputePlatform: ECS, ApplicationName: !Ref ECSAppName }

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess: { Action: TERMINATE, WaitTimeInMinutes: 5 }
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      LoadBalancerInfo:
        TargetGroupPairInfo:
          ProdTrafficRoute: { ListenerArns: [!Ref AlbListener] }
          TargetGroups:
            - Name: !GetAtt BlueTg.TargetGroupFullName
            - Name: !GetAtt GreenTg.TargetGroupFullName
      ECSService: !Ref ECSService

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineFullAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - codedeploy:CreateDeployment
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !Ref ECRRepoName
                # Replace with ImageTag if desired
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployECS
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup

Outputs:
  VpcId: { Value: !Ref VPC }
  PublicSubnets: { Value: !Join [ ',', [!Ref PublicSubnet1, !Ref PublicSubnet2] ] }
  PrivateSubnets: { Value: !Join [ ',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2] ] }
  LoadBalancerDNS: { Value: !GetAtt ALB.DNSName }
  S3BucketName:
    Description: Name of the application images bucket
    Value: !Ref AppS3Bucket
  S3BucketArn:
    Description: ARN of the application images bucket
    Value: !GetAtt AppS3Bucket.Arn

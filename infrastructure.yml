
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Full infra stack: VPC, endpoints, ALB, ECS + Fargate, Blue/Green deploy via gitHub actions.'

Parameters:
#Conditional deployment flag
  DeployApp:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
    Description: |
      Set to "true" to deploy the application stack. Set to "false" to only create the infrastructure without deploying the app.

  ContainerImage:
    Type: String
    Default: "796973518232.dkr.ecr.eu-west-1.amazonaws.com/igallery-repo:latest"
    Description: |
      ECR image URI for your container. Update this to deploy a new version of your app.

  # VPC and Subnet Configuration
  VpcCidr:  
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCIDRs:
    Type: List<String>
    Default: "10.0.1.0/24,10.0.2.0/24"

  PrivateSubnetCIDRs:
    Type: List<String>
    Default: "10.0.101.0/24,10.0.102.0/24"

  AvailabilityZones:
    Type: List<String>
    Default: "eu-west-1a,eu-west-1b"

  ECRRepoName:
    Type: String
    Default: "igallery-repo"

  ECSAppName:
    Type: String
    Default: "igallery-app"

  ContainerPort: 
    Type: Number
    Default: 80

  DesiredCount:
    Type: Number
    Default: 2

  S3BucketName:
    Type: String
    Default: "wk5lab1imagesbucket1025"

Conditions:
  CreateAppResources: !Equals [!Ref DeployApp, "true"]
  
Resources:
  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: gallery-vpc }]

  InternetGateway: { Type: AWS::EC2::InternetGateway }
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref VPC }
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Add Private Route Table and Associations
  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-rt

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [0, !Ref PublicSubnetCIDRs], AvailabilityZone: !Select [0, !Ref AvailabilityZones], MapPublicIpOnLaunch: true, Tags: [{ Key: Name, Value: public-subnet-a }] }
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [1, !Ref PublicSubnetCIDRs], AvailabilityZone: !Select [1, !Ref AvailabilityZones], MapPublicIpOnLaunch: true, Tags: [{ Key: Name, Value: public-subnet-b }] }
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [0, !Ref PrivateSubnetCIDRs], AvailabilityZone: !Select [0, !Ref AvailabilityZones], Tags: [{ Key: Name, Value: private-subnet-a }] }
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, CidrBlock: !Select [1, !Ref PrivateSubnetCIDRs], AvailabilityZone: !Select [1, !Ref AvailabilityZones], Tags: [{ Key: Name, Value: private-subnet-b }] }

  PublicSubnet1RTA: { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnet1, RouteTableId: !Ref PublicRT } }
  PublicSubnet2RTA: { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnet2, RouteTableId: !Ref PublicRT } }

  PrivateSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRT

  PrivateSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRT

  # VPC Endpoints
  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Endpoint SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds: [!Ref PrivateRT ]
      VpcEndpointType: Gateway
      PolicyDocument:
        Statement: [{ Action: "s3:*", Effect: Allow, Principal: "*", Resource: "*" }]

  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      SecurityGroupIds: [ !Ref EndpointSG ]
      PrivateDnsEnabled: true

    # --- ECR Repository (Private by default) ---
  # ECRRepository:
  #   Type: AWS::ECR::Repository
  #   Properties:
  #     RepositoryName: !Ref ECRRepoName
  #     ImageScanningConfiguration:
  #       ScanOnPush: true
  #     # ImageTagMutability: IMMUTABLE


  # ALB & Security Groups
  AlbSG:
    Condition: CreateAppResources
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  taskSG:
    Condition: CreateAppResources
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Tasks SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Condition: CreateAppResources
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ECSAppName}-alb"
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: [ !Ref AlbSG ]

  BlueTg:
    Condition: CreateAppResources
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSAppName}-blue"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher: { HttpCode: "200" }

  GreenTg:
    Condition: CreateAppResources
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSAppName}-green"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher: { HttpCode: "200" }

  AlbListener:
    Condition: CreateAppResources
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref BlueTg
                Weight: 100
              - TargetGroupArn: !Ref GreenTg
                Weight: 0

  # S3 Bucket for Image Storage
  AppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub igallery-app-bucket-${AWS::AccountId}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete

  # ECS Cluster & Task
  ECSCluster:  
    Condition: CreateAppResources
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: igallery-app-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${AppS3Bucket}
                  - !Sub arn:aws:s3:::${AppS3Bucket}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ECSAppName}:*"

  ECSTaskDef:
    Condition: CreateAppResources
    Type: AWS::ECS::TaskDefinition
    DependsOn: AppLogGroup
    Properties:
      Family: !Ref ECSAppName
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ECSAppName
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group:  !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: S3_BUCKET
              Value: !Ref AppS3Bucket

  ECSService:
    Condition: CreateAppResources
    Type: AWS::ECS::Service
    DependsOn: AlbListener
    Properties:
      ServiceName: igallery-app-service
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      DeploymentController: { Type: CODE_DEPLOY }
      TaskDefinition: !Ref ECSTaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
          SecurityGroups: [ !Ref taskSG ]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Ref ECSAppName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref BlueTg
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50   

    # -- Application Auto Scaling Role --
  ApplicationAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppAutoscalingPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - application-autoscaling:*
                Resource: '*'

  # -- Scalable Target Resource --
  ScalableTarget:
    Condition: CreateAppResources
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Join ["/", ["service", !Ref ECSCluster, !GetAtt ECSService.Name]] 
      RoleARN: !GetAtt ApplicationAutoscalingRole.Arn
      MinCapacity: 1
      MaxCapacity: 10

  # -- Target Tracking Scaling Policy --
  ScalingPolicy:
    Condition: CreateAppResources
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-target-tracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60


  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codedeploy.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  CodeDeployApplication:
    Condition: CreateAppResources
    Type: AWS::CodeDeploy::Application
    Properties: { ComputePlatform: ECS, ApplicationName: !Ref ECSAppName }

  CodeDeployDeploymentGroup:
    Condition: CreateAppResources
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: [ECSService, BlueTg, GreenTg, AlbListener]
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${ECSAppName}-dg"
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess: { Action: TERMINATE, TerminationWaitTimeInMinutes: 5 }
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
  
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:  
              ListenerArns: [!Ref AlbListener] 
            TargetGroups:
              - Name: !Sub "${ECSAppName}-blue"
              - Name: !Sub "${ECSAppName}-green"
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !GetAtt ECSService.Name

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  
  AppLogGroup:
    Condition: CreateAppResources
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ECSAppName}"
      RetentionInDays: 7

  # PipelineRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal: { Service: codepipeline.amazonaws.com }
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: CodePipelineFullAccess
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecr:BatchGetImage
  #                 - ecr:GetDownloadUrlForLayer
  #                 - ecs:DescribeServices
  #                 - ecs:UpdateService
  #                 - codedeploy:CreateDeployment
  #                 - iam:PassRole
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: '*'

  # Pipeline:
  #   Condition: CreateAppResources
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     RoleArn: !GetAtt PipelineRole.Arn
  #     ArtifactStore:
  #       Type: S3
  #       Location: !Ref ArtifactsBucket
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: Source
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Provider: ECR
  #               Version: '1'
  #             OutputArtifacts:
  #               - Name: SourceOutput
  #             Configuration:
  #               RepositoryName: !Ref ECRRepoName
  #               ImageTag: "latest"
  #               # Replace with ImageTag if desired

  #       - Name: Deploy
  #         Actions:
  #           - Name: Deploy
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: CodeDeployECS
  #               Version: '1'
  #             InputArtifacts:
  #               - Name: SourceOutput
  #             Configuration:
  #               ApplicationName: !Ref CodeDeployApplication
  #               DeploymentGroupName: !Ref CodeDeployDeploymentGroup

Outputs:
  VpcId: { Value: !Ref VPC }
  PublicSubnets: { Value: !Join [ ',', [!Ref PublicSubnet1, !Ref PublicSubnet2] ] }
  PrivateSubnets: { Value: !Join [ ',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2] ] }
  LoadBalancerDNS: { Condition: CreateAppResources, Value: !GetAtt ALB.DNSName }
  S3BucketName:
    Description: Name of the application images bucket
    Value: !Ref AppS3Bucket
  # S3BucketArn:
  #   Description: ARN of the application images bucket
  #   Value: !GetAtt AppS3Bucket.Arn
  ArtifactsBucketName:
    Value: !Ref ArtifactsBucket
    Description: Name of the S3 bucket for deployment artifacts
  DeploymentGroupName:
    Condition: CreateAppResources
    Value: !Ref CodeDeployDeploymentGroup
    Description: Name of the CodeDeploy deployment group


  
